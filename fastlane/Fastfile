default_platform(:ios)

platform :ios do
  desc "Run unit tests on a simulator and produce JUnit"
  lane :unit_test do
    device  = ENV['SIM_DEVICE'] || "iPhone 16 Pro"
    proj    = ENV['XCODEPROJ']  # Jenkins will pass absolute path
    scheme  = ENV['SCHEME']     # Jenkins will pass detected scheme

    UI.message("Using project: #{proj}, scheme: #{scheme}, device: #{device}")

    scan(
      project: proj,
      scheme: scheme,
      devices: [device],
      clean: true,
      build_for_testing: true,
      output_types: "junit",
      output_directory: "fastlane/test_output"
    )
  end

  desc "Build Debug for Simulator and zip the .app"
  lane :build_debug_sim do
    proj   = ENV['XCODEPROJ']
    scheme = ENV['SCHEME']
    udid   = ENV['SIM_UDID']

    dest = "platform=iOS Simulator,id=#{udid}"
    derived = "build/DerivedData"

    sh %(
      set -euo pipefail
      rm -rf #{derived} build/logs build/Artifacts || true
      mkdir -p build/logs build/Artifacts
    )

    sh %(
      set -o pipefail
      xcodebuild build \
        -project "#{proj}" \
        -scheme "#{scheme}" \
        -configuration Debug \
        -sdk iphonesimulator \
        -derivedDataPath "#{derived}" \
        -allowProvisioningUpdates \
        -destination '#{dest}' \
      | xcpretty --utf --color > build/logs/xcodebuild.pretty.log
    )

    app_dir = "build/DerivedData/Build/Products/Debug-iphonesimulator"
    app_path = Actions.sh("find #{app_dir} -type d -name '*.app' | head -n1").strip
    UI.user_error!("No .app found in #{app_dir}") if app_path.empty?

    target_dir = ENV['WORKSPACE'] || Dir.pwd
    target_dir = File.join(target_dir, "build/Artifacts")
    FileUtils.mkdir_p(target_dir)

    zip_path = File.join(target_dir, "SimulatorApp.zip")
    sh %Q(zip -r "#{zip_path}" "#{app_path}")
    UI.message("Wrote artifact: #{zip_path}")
  end
end
