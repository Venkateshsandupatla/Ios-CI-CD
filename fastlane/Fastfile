default_platform(:ios)

platform :ios do
  desc "Run unit tests on the chosen simulator and output JUnit"
  lane :unit_test do
    device  = ENV['SIM_DEVICE']  || "iPhone 16 Pro"
    proj    = ENV['XCODEPROJ']   || Dir['*.xcodeproj'].first
    scheme  = ENV['SCHEME']      || UI.user_error!("SCHEME not set")

    UI.message("Unit tests -> project: #{proj}, scheme: #{scheme}, device: #{device}")

    scan(
      project: proj,
      scheme: scheme,
      devices: [device],
      clean: true,
      build_for_testing: true,
      output_types: "junit",
      output_directory: "fastlane/test_output",
      fail_build: true
    )
  end

  desc "Build Debug for Simulator and zip to build/Artifacts/SimulatorApp.zip"
  lane :build_debug_sim do
    proj    = ENV['XCODEPROJ']   || Dir['*.xcodeproj'].first
    scheme  = ENV['SCHEME']      || UI.user_error!("SCHEME not set")
    udid    = ENV['SIM_UDID']    || UI.user_error!("SIM_UDID not set")

    derived = "build/DerivedData"
    sh "rm -rf #{derived} build/logs build/Artifacts || true"
    sh "mkdir -p build/logs build/Artifacts"

    destination = "platform=iOS Simulator,id=#{udid}"
    UI.message("Build Debug (sim) -> project: #{proj}, scheme: #{scheme}, destination: #{destination}")

    sh %Q(
      set -eo pipefail
      if command -v xcpretty >/dev/null 2>&1; then
        xcodebuild build \
          -project "#{proj}" \
          -scheme "#{scheme}" \
          -configuration Debug \
          -sdk iphonesimulator \
          -derivedDataPath "#{derived}" \
          -allowProvisioningUpdates \
          -destination '#{destination}' \
        | xcpretty --utf --color > build/logs/xcodebuild.pretty.log
      else
        xcodebuild build \
          -project "#{proj}" \
          -scheme "#{scheme}" \
          -configuration Debug \
          -sdk iphonesimulator \
          -derivedDataPath "#{derived}" \
          -allowProvisioningUpdates \
          -destination '#{destination}' \
        | tee build/logs/xcodebuild.raw.log
      fi
    )

    app_dir  = File.join(derived, "Build/Products/Debug-iphonesimulator")
    app_path = Actions.sh(%Q(find "#{app_dir}" -type d -name "*.app" | head -n1), log: false).strip
    UI.user_error!("No .app found in #{app_dir}") if app_path.to_s.empty?

    target_dir = File.expand_path("build/Artifacts")
    FileUtils.mkdir_p(target_dir)

    zip_path = File.join(target_dir, "SimulatorApp.zip")
    sh %Q(zip -r "#{zip_path}" "#{app_path}")
    UI.success("Wrote artifact: #{zip_path}")
  end
end
